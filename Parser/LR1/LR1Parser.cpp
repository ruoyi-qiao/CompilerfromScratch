#include <string>

struct Token
{
    std::string lexeme;
};

#include <memory>
#include <vector>
#include <iostream>

class Node {
private:
    int childCount;
    Token t;
    std::vector<std::shared_ptr<Node>> children;

public:
    Node();
    Node(const Token&);
    Node(const std::string&);
    Node(const Token&, const std::vector<std::shared_ptr<Node>>&);

    const Token& GetToken();
    std::vector<std::shared_ptr<Node>> GetChildren();
    void addChild(const std::shared_ptr<Node>&);
    void setChild(int, const std::shared_ptr<Node>&);
    void setChildren(const std::vector<std::shared_ptr<Node>>&);

    std::string ToString();
    void PrintTree(int, std::vector<std::shared_ptr<Node>>&);
};

Node::Node(){
    t = {};
    childCount = 0;
    children = {};
}

Node::Node(const Token& token) {
    t = token;
    childCount = 0;
    children = {};
}

Node::Node(const std::string& lexeme) {
    t.lexeme = lexeme;
    childCount = 0;
    children = {};
}

Node::Node(const Token& token, const std::vector<std::shared_ptr<Node>>& children) {
    t = token;
    childCount = children.size();
    this->children = children;
}

const Token& Node::GetToken() {
    return t;
}

void Node::addChild(const std::shared_ptr<Node>& child) {
    children.push_back(child);
    childCount++;
}

void Node::setChild(int index, const std::shared_ptr<Node>& child) {
    children[index] = child;
}

void Node::setChildren(const std::vector<std::shared_ptr<Node>>& children) {
    this->children = children;
    childCount = children.size();
}

std::string Node::ToString(){
    return t.lexeme;
}

std::vector<std::shared_ptr<Node>> Node::GetChildren(){
    return children;
}

void Node::PrintTree(int depth, std::vector<std::shared_ptr<Node>>& tree){
    for (int i = 0; i < depth; i++) {
        std::cout << "\t";
    }
    std::cout << ToString() << std::endl;
    for (int i = 0; i < childCount; i++) {
        children[i]->PrintTree(depth + 1, tree);
    }
}

#include <cctype> 

class Lexer {
private:
    std::string sourceCode;
    int index, length;
    std::vector<int> line, column;
    std::vector<int> lastTokenIndex;

    const std::string readToken();
    inline char readChar();
    inline char unreadChar();

public:
    void SetSourceCode(const std::string&);
    Token consumeToken();
    Token checkToken();
    void unreadToken();
    void reportError(const std::string&);
    std::pair<int, int> GetLineAndColumn();
};

#include <stdexcept>



void Lexer::SetSourceCode(const std::string& l){
    this->sourceCode = l;
    index = 0;
    lastTokenIndex.clear();
    lastTokenIndex.push_back(0);
    length = l.length();
    column.resize(length);
    line.resize(length);
    int currentLine = 1;
    int currentColumn = 1;
    for (int i = 0; i < length; i++) {
        line[i] = currentLine;
        column[i] = currentColumn;
        if (l[i] == '\n') {
            currentLine++;
            currentColumn = 1;
        } else {
            currentColumn++;
        }
    }
}

Token Lexer::consumeToken(){
    Token token;
    std::string lexeme = readToken();
    token.lexeme = lexeme;
    return token;
}

const std::string Lexer::readToken() {
    // tokens are splited by space
    std::string token;
    lastTokenIndex.push_back(index);
    while (index < int(sourceCode.length())) {
        char c = readChar();
        if (c == ' ' || c == '\t' || c == '\n') {
            if (token.length() > 0) {
                unreadChar();
                break;
            }
        } else {
            token += c;
        }
    }
    return token;
}

Token Lexer::checkToken() {
    int old = index;
    std::string token = readToken();
    lastTokenIndex.pop_back();
    index = old;
    return {token};
}

void Lexer::unreadToken() {
    index = lastTokenIndex.back();
    lastTokenIndex.pop_back();
}

inline char Lexer::readChar()
{
    if (index < int(sourceCode.length())) {
        return sourceCode[index++];
    }
    return 0;
}

inline char Lexer::unreadChar()
{
    if (index < 0){
        throw std::runtime_error("unReadChar() is not implemented");
    }
    index--;
    return sourceCode[index];
}

void Lexer::reportError(const std::string& msg) {
    std::cerr << "Error: " << msg << " at line " << line[index - 1] << " column " << column[index - 1] << std::endl;
    throw std::runtime_error(msg);
}

std::pair<int, int> Lexer::GetLineAndColumn() {
    return std::make_pair(line[index - 1], column[index - 1]);
}

#include<map>
#include<string>

const int NonTerminalCount = 14;
const int TerminalCount = 22;

// terminals map to indices: "(" -> 0; ")" -> 1; "*" -> 2; "+" -> 3; "-" -> 4; "/" -> 5; ";" -> 6; "<" -> 7; "<=" -> 8; "=" -> 9; "==" -> 10; ">" -> 11; ">=" -> 12; "ID" -> 13; "NUM" -> 14; "else" -> 15; "if" -> 16; "then" -> 17; "while" -> 18; "{" -> 19; "}" -> 20; eof -> 21; 
static const int LR1ActionTable[134][22] = {
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   3,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,   0,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 256,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  13,  -1,  -1,  10,  -1,  14,  12, 263,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  13,  -1,  -1,  10,  -1,  14,  12, 263,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 260,  -1,  -1, 260,  -1, 260, 260, 260,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  16,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 257,  -1,  -1, 257,  -1, 257, 257, 257,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 258,  -1,  -1, 258,  -1, 258, 258, 258,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 259,  -1,  -1, 259,  -1, 259, 259, 259,  -1,},
	{   17,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 263,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  13,  -1,  -1,  10,  -1,  14,  12, 263,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  19,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   20,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 262,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 261,},
	{   25,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  28,  -1,},
	{   32,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  34,  33,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   25,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  36,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  39,  38,  -1,  40,  42,  41,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  44,  46,  -1,  -1, 276, 276,  -1, 276, 276, 276,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  50, 280, 280,  48,  -1, 280, 280,  -1, 280, 280, 280,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   54,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  56,  55,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1, 282, 282, 282, 282,  -1, 282, 282,  -1, 282, 282, 282,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1, 281, 281, 281, 281,  -1, 281, 281,  -1, 281, 281, 281,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 261,  -1,  -1, 261,  -1, 261, 261, 261,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  57,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  59,  61,  -1, 276,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  65, 280, 280,  63, 280,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   54,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  56,  55,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1, 282, 282, 282, 282, 282,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1, 281, 281, 281, 281, 281,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  67,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  68,  -1,  -1,  -1,  -1,},
	{   54,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  56,  55,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{  270,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 270, 270,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{  268,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 268, 268,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{  272,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 272, 272,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{  271,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 271, 271,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{  269,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 269, 269,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1, 273, 273,  -1, 273, 273, 273,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   25,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1, 276, 276,  -1, 276, 276, 276,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   25,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1, 277, 277,  -1,  -1, 277, 277,  -1, 277, 277, 277,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   25,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1, 280, 280,  -1,  -1, 280, 280,  -1, 280, 280, 280,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   25,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  74,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 276,  -1,  76,  78,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 280,  82, 280, 280,  80,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   54,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  56,  55,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 282, 282, 282, 282, 282,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 281, 281, 281, 281, 281,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 266,  -1,  -1, 266,  -1, 266, 266, 266,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1, 273,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   32,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  34,  33,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1, 276,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   32,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  34,  33,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1, 277, 277,  -1, 277,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   32,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  34,  33,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1, 280, 280,  -1, 280,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   32,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  34,  33,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  88,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  13,  -1,  -1,  10,  -1,  14,  12,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  97,  -1,  -1,  95,  -1,  98,  96,  -1,  -1,},
	{   -1, 267,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  44,  46,  -1,  -1, 276, 276,  -1, 276, 276, 276,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  44,  46,  -1,  -1, 276, 276,  -1, 276, 276, 276,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  50, 280, 280,  48,  -1, 280, 280,  -1, 280, 280, 280,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  50, 280, 280,  48,  -1, 280, 280,  -1, 280, 280, 280,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1, 283, 283, 283, 283,  -1, 283, 283,  -1, 283, 283, 283,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 273,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   54,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  56,  55,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 276,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   54,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  56,  55,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 277,  -1, 277, 277,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   54,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  56,  55,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 280,  -1, 280, 280,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   54,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  56,  55,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 107,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  59,  61,  -1, 276,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  59,  61,  -1, 276,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  65, 280, 280,  63, 280,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  65, 280, 280,  63, 280,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1, 283, 283, 283, 283, 283,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 265,  -1,  -1, 265,  -1, 265, 265, 265,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 112,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 260,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 257,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 258,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 259,  -1,  -1,  -1,  -1,  -1,  -1,},
	{  113,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  13,  -1,  -1,  10,  -1,  14,  12, 263,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 115,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{  116,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1, 274, 274,  -1, 274, 274, 274,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1, 275, 275,  -1, 275, 275, 275,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1, 279, 279,  -1,  -1, 279, 279,  -1, 279, 279, 279,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1, 278, 278,  -1,  -1, 278, 278,  -1, 278, 278, 278,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 276,  -1,  76,  78,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 276,  -1,  76,  78,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 280,  82, 280, 280,  80,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 280,  82, 280, 280,  80,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 283, 283, 283, 283, 283,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1, 274,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1, 275,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1, 279, 279,  -1, 279,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1, 278, 278,  -1, 278,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  13,  -1,  -1,  10,  -1,  14,  12,  -1,  -1,},
	{   25,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 123,  -1,},
	{   32,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  34,  33,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   25,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  27,  26,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 274,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 275,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 279,  -1, 279, 279,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 278,  -1, 278, 278,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 264,  -1,  -1, 264,  -1, 264, 264, 264,  -1,},
	{   -1, 126,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 261,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1, 127,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 128,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 129,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 266,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  97,  -1,  -1,  95,  -1,  98,  96,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  97,  -1,  -1,  95,  -1,  98,  96,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 265,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 132,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  97,  -1,  -1,  95,  -1,  98,  96,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 264,  -1,  -1,  -1,  -1,  -1,  -1,},
};
// terminals map to indices: <arithexpr> -> 0; <arithexprprime> -> 1; <assgstmt> -> 2; <boolexpr> -> 3; <boolop> -> 4; <compoundstmt> -> 5; <ifstmt> -> 6; <multexpr> -> 7; <multexprprime> -> 8; <program> -> 9; <simpleexpr> -> 10; <stmt> -> 11; <stmts> -> 12; <whilestmt> -> 13; 
static const int LR1GotoTable[133][14] = {
	{   -1,  -1,  -1,  -1,  -1,   2,  -1,  -1,  -1,   1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,   9,  -1,  -1,   5,   7,  -1,  -1,  -1,  -1,   4,   6,   8,},
	{   -1,  -1,   9,  -1,  -1,   5,   7,  -1,  -1,  -1,  -1,   4,  15,   8,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,   9,  -1,  -1,   5,   7,  -1,  -1,  -1,  -1,   4,  18,   8,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   22,  -1,  -1,  21,  -1,  -1,  -1,  23,  -1,  -1,  24,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   29,  -1,  -1,  -1,  -1,  -1,  -1,  30,  -1,  -1,  31,  -1,  -1,  -1,},
	{   22,  -1,  -1,  35,  -1,  -1,  -1,  23,  -1,  -1,  24,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  37,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  43,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  47,  -1,  -1,  -1,  -1,  -1,},
	{   51,  -1,  -1,  -1,  -1,  -1,  -1,  52,  -1,  -1,  53,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  58,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  62,  -1,  -1,  -1,  -1,  -1,},
	{   66,  -1,  -1,  -1,  -1,  -1,  -1,  52,  -1,  -1,  53,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   69,  -1,  -1,  -1,  -1,  -1,  -1,  52,  -1,  -1,  53,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  70,  -1,  -1,  24,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  71,  -1,  -1,  24,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  72,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  73,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  75,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  79,  -1,  -1,  -1,  -1,  -1,},
	{   83,  -1,  -1,  -1,  -1,  -1,  -1,  52,  -1,  -1,  53,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  84,  -1,  -1,  31,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  85,  -1,  -1,  31,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  86,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  87,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,   9,  -1,  -1,   5,   7,  -1,  -1,  -1,  -1,  89,  -1,   8,},
	{   -1,  -1,  94,  -1,  -1,  91,  92,  -1,  -1,  -1,  -1,  90,  -1,  93,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  99,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 100,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 101,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 102,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1, 103,  -1,  -1,  53,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1, 104,  -1,  -1,  53,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 105,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 106,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 108,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 109,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 110,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 111,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,   9,  -1,  -1,   5,   7,  -1,  -1,  -1,  -1,   4, 114,   8,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 117,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1, 118,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 119,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, 120,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,   9,  -1,  -1,   5,   7,  -1,  -1,  -1,  -1, 121,  -1,   8,},
	{   22,  -1,  -1, 122,  -1,  -1,  -1,  23,  -1,  -1,  24,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{  124,  -1,  -1,  -1,  -1,  -1,  -1,  30,  -1,  -1,  31,  -1,  -1,  -1,},
	{   22,  -1,  -1, 125,  -1,  -1,  -1,  23,  -1,  -1,  24,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  94,  -1,  -1,  91,  92,  -1,  -1,  -1,  -1, 130,  -1,  93,},
	{   -1,  -1,  94,  -1,  -1,  91,  92,  -1,  -1,  -1,  -1, 131,  -1,  93,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,},
	{   -1,  -1,  94,  -1,  -1,  91,  92,  -1,  -1,  -1,  -1, 133,  -1,  93,},
};
std::map<int, std::string> Index2NonTerminal = {
	{0, "<arithexpr>"},
	{1, "<arithexprprime>"},
	{2, "<assgstmt>"},
	{3, "<boolexpr>"},
	{4, "<boolop>"},
	{5, "<compoundstmt>"},
	{6, "<ifstmt>"},
	{7, "<multexpr>"},
	{8, "<multexprprime>"},
	{9, "<program>"},
	{10, "<simpleexpr>"},
	{11, "<stmt>"},
	{12, "<stmts>"},
	{13, "<whilestmt>"},
};
std::map<int, std::string> Index2Terminal = {
	{0, "("},
	{1, ")"},
	{2, "*"},
	{3, "+"},
	{4, "-"},
	{5, "/"},
	{6, ";"},
	{7, "<"},
	{8, "<="},
	{9, "="},
	{10, "=="},
	{11, ">"},
	{12, ">="},
	{13, "ID"},
	{14, "NUM"},
	{15, "else"},
	{16, "if"},
	{17, "then"},
	{18, "while"},
	{19, "{"},
	{20, "}"},
	{21, "eof"},
};
std::map<std::string, int> NonTerminal2Index = {
	{"arithexpr", 0},
	{"arithexprprime", 1},
	{"assgstmt", 2},
	{"boolexpr", 3},
	{"boolop", 4},
	{"compoundstmt", 5},
	{"ifstmt", 6},
	{"multexpr", 7},
	{"multexprprime", 8},
	{"program", 9},
	{"simpleexpr", 10},
	{"stmt", 11},
	{"stmts", 12},
	{"whilestmt", 13},
};
std::map<std::string, int> Terminal2Index = {
	{"(", 0},
	{")", 1},
	{"*", 2},
	{"+", 3},
	{"-", 4},
	{"/", 5},
	{";", 6},
	{"<", 7},
	{"<=", 8},
	{"=", 9},
	{"==", 10},
	{">", 11},
	{">=", 12},
	{"ID", 13},
	{"NUM", 14},
	{"else", 15},
	{"if", 16},
	{"then", 17},
	{"while", 18},
	{"{", 19},
	{"}", 20},
	{"eof", 21},
};
std::vector<int> productionLength = {
	1,
	1,
	1,
	1,
	1,
	3,
	2,
	0,
	8,
	5,
	4,
	3,
	1,
	1,
	1,
	1,
	1,
	2,
	3,
	3,
	0,
	2,
	3,
	3,
	0,
	1,
	1,
	3,
};
std::vector<std::string> productionName = {
	"program",
	"stmt",
	"stmt",
	"stmt",
	"stmt",
	"compoundstmt",
	"stmts",
	"stmts",
	"ifstmt",
	"whilestmt",
	"assgstmt",
	"boolexpr",
	"boolop",
	"boolop",
	"boolop",
	"boolop",
	"boolop",
	"arithexpr",
	"arithexprprime",
	"arithexprprime",
	"arithexprprime",
	"multexpr",
	"multexprprime",
	"multexprprime",
	"multexprprime",
	"simpleexpr",
	"simpleexpr",
	"simpleexpr",
};

#include <algorithm>
#include <assert.h>

struct symbol {
    bool isTerminal;
    std::string name;
};

class Parser {
private:
    Lexer lexer;
    Token currentToken;
    std::string sourceCode;
    std::vector<std::vector<std::string>> snapshots;

    int getTerminalIndex(const std::string&);
    int getNonTerminalIndex(const std::string&);
    std::vector<std::string> backDeducing(std::vector<std::string>, std::string, int, int);
    std::string convert(int);
    
    void error_handle(std::string &, int, int&);
    void insert_missing_token(std::string &, int);

public:
    std::string errorToken;

    std::vector<std::vector<std::string>> Parse();
    void SetSourceCode(std::string&);
};

void Parser::SetSourceCode(std::string& sourceCode){
    errorToken = "";
    lexer.SetSourceCode(sourceCode);

    std::string word;
    std::vector<std::string> words;

    for (const auto & c : sourceCode) {
        if (c == ' ' || c == '\n' || c == '\t') {
            if (word != "") {
                words.push_back(word);
                word = "";
            }
        } else {
            word += c;
        }
    }
    if (word != "$") {
        words.push_back(word);
    }
    snapshots.push_back(words);
}

std::vector<std::vector<std::string>> Parser::Parse(){
    int startState = 0, endpos = -1;
    bool errorFlag = false;
    std::vector<int> stateStack;
    std::vector<symbol> symbolStack;

    stateStack.push_back(startState);
    currentToken = lexer.checkToken();
    for (;;) {
        if (currentToken.lexeme == "$") {
            currentToken.lexeme = "eof";
        }
        int action = LR1ActionTable[stateStack.back()][getTerminalIndex(currentToken.lexeme)];
        if (action == 0) { // accept
            return snapshots;
        }
        if (action == -1) {
            errorFlag = true;
            error_handle(currentToken.lexeme, stateStack.back(), action);
            insert_missing_token(currentToken.lexeme, endpos);
        }
        if (action & (1 << 8)) { // reduce
            int production = action & ((1 << 8) - 1);
            int currentProductionLength = productionLength[production];
            std::vector<std::string> current = snapshots.back();

            std::vector<std::string>  snapshot = backDeducing(current, productionName[production], endpos, currentProductionLength);
            

            for (int i = 0; i < currentProductionLength; i++) {
                stateStack.pop_back();
                symbolStack.pop_back();
                endpos--;
            }


            int gotoState = LR1GotoTable[stateStack.back()][getNonTerminalIndex(productionName[production])];
            stateStack.push_back(gotoState);
            symbolStack.push_back({false, productionName[production]});
            endpos++;
        } else { // shift
            stateStack.push_back(action);
            symbolStack.push_back({true, currentToken.lexeme});
            endpos++;

            if(errorFlag) errorFlag = false;
            else lexer.consumeToken();

            currentToken = lexer.checkToken();
        }
    }
}

std::vector<std::string> Parser::backDeducing(std::vector<std::string> current, std::string symbol, int endpos, int productionLength) {
    std::vector<std::string> result;
    int startpos = endpos - productionLength + 1;
    for (int index = 0; index < startpos; index++) {
        result.push_back(current[index]);
    }
    result.push_back(symbol);
    for (int index = endpos + 1; index < int(current.size()); index++) {
        result.push_back(current[index]);
    }
    snapshots.push_back(result);
    return result;
}

int Parser::getTerminalIndex(const std::string& lexeme) {
    assert(Terminal2Index.find(lexeme) != Terminal2Index.end());
    return Terminal2Index[lexeme];
}

int Parser::getNonTerminalIndex(const std::string& name) {
    assert(NonTerminal2Index.find(name) != NonTerminal2Index.end());
    return NonTerminal2Index[name];
}

std::string Parser::convert(int tag) {
    assert(Index2Terminal.find(tag) != Index2Terminal.end());
    return Index2Terminal[tag];
}

static int terminalPriorities[TerminalCount] = {
    6,  1,  20,  0,  2,  3,  4,  5,  7,  8, 9, 10, 
    11, 12, 13, 14, 15, 16, 17, 18, 19, 21,
};

void Parser::error_handle(std::string & errorToken, int state, int & action)  {

    for (int i = 0; i < TerminalCount; i++) {
        int index = terminalPriorities[i];
        if (LR1ActionTable[state][index] != -1) {
            std::cout << "语法错误，第" << lexer.GetLineAndColumn().first << "行，缺少\"";
            std::cout << convert(index) << "\"" << std::endl;
            errorToken = convert(index);
            action = LR1ActionTable[state][index];
            return;
        }
    }

    std::cout << "unrecoverable error on line " << lexer.GetLineAndColumn().first << std::endl;
    exit(1);
}

void Parser::insert_missing_token(std::string& errorToken, int endpos) {
    int reminder = snapshots.back().size() - endpos - 1;
    // insert the token to each snapshot
    for (auto & snapshot : snapshots) {
        snapshot.insert(snapshot.end() - reminder, errorToken);
    }
}

/* 不要修改这个标准输入函数 */
void read_prog(std::string& prog)
{
    char c;
    while(scanf("%c",&c)!=EOF){
        prog += c;
    }
}
/* 你可以添加其他函数 */

void Analysis()
{
	std::string _prog, prog;
	read_prog(_prog);
    _prog += " $";
    for (int i = 0; i < (int)_prog.length(); i++) {
        if (i == _prog.length() || !(_prog[i] == '\n' && _prog[i + 1] == '\n')) {
            prog.push_back(_prog[i]);
        }
    }

    Parser parser;
    parser.SetSourceCode(prog);
    std::vector<std::vector<std::string>> snapshots = parser.Parse();
    
    std::vector<std::vector<std::string>>::reverse_iterator rit;
    for (rit = snapshots.rbegin(); rit != snapshots.rend(); rit++) {
    
        std::vector<std::string>::iterator it;
        for (it = rit->begin(); it != rit->end(); it++) {
            std::cout << *it << " ";
        }
        
        if (next(rit) != snapshots.rend())
            std::cout << "=> " << std::endl; 
    }
    
}

int main () {
    
    Analysis();
    
    return 0;
}